\subsection{Работа с каталогами}

Для работы с каталогами в C нужно подключить \verb!<dirent.h>!. Есть \verb!DIR!, по аналогии с соответствующим объектом для работы с файлами. Есть функции \verb!opendir, readdir!, \verb!closedir!ю

\hrulefill

\begin{verbatim}
int stat(char*, struct stat*)
int lstat(char*, struct stat*)
int fstat(int fd, struct stat*)
\end{verbatim}

Эти функции добывают разнообразную информацию о файле, записываемую в \verb!stat!. \verb!fstat! работает с уже открытым файлом. \verb!lstat!, в отличие от \verb!stat! работает ещё и с символическими ссылками. Символическая ссылка создаётся при помощи \verb!link!, уничтожается при помощи \verb!unlink!.

\subsection{Низкоуровневый ввод-вывод}

В ядре ОС есть две таблицы: таблица открытых файлов (ТОФ) и таблица открытых файлов для каждого процесса, в которой записями являются ссылки на записи ТОФ.

В каждой записи ТОФ хранится  
\begin{itemize}
\item pid --- список идентификаторов процессов
\item файл устройства
\item индексный дескриптор
\item ссылка на очередь операций
\item <<курсор>> в файле
\end{itemize}

Добавление записи в эту таблицу можно реализовать лишь системным вызовом
\begin{verbatim}
int open(char* path, mode_t mode, perm_t perms);
\end{verbatim}
Возвращаемое значение --- номер строчки в ТОФ. Для вывода ТОФ существует утилита \verb!lsof!

Для манипуляций с ТОФ конкретного процесса есть следующий список системных вызовов:
\begin{verbatim}
int dup(int fd); //скопировать запись, возвращает номер строки, -1 при ошибке
int dup2(int oldfd, int newfd); //если не смог, -1, иначе 0
\end{verbatim}

\verb!dup2! принимает номера записей в ТОФ процесса, записывая в запись с номером \verb!oldfd! содержимое записи с номером \verb!newfd!.

По умолчанию у каждого процесса есть три записи:
\begin{itemize}
\item 0 --- стандартный ввод
\item 1 --- стандартный вывод
\item 2 --- стандартный поток ошибок
\end{itemize}

В качестве прав передаются восьмеричные маски. Для \verb!mode! есть следующие опции, комбинируемые побитовым ИЛИ:
\begin{itemize}
\item \verb!O_CREAT! --- создать файл, замяв существующие
\item \verb!O_EXCL! --- не трогать существующие
\item \verb!O_APPEND! --- добавление в конец файла
\item \verb!O_RDONLY!
\item \verb!O_WRONLY!
\item \verb!O_RDWR!
\item Далее магия...
\item \verb!O_LARGEFILE! --- использование 64-бытных смещений а 32-битной машине
\item \verb!O_CLOEXEC! --- при смене тела процесса файл будет закрыт
\item \verb!O_SYNC! --- все операции синхронизируются с драйвером внешнего устройства
\item \verb!O_DIRECTORY! --- для открытия каталога
\end{itemize}

С открытым файлом можно использовать \verb!fcntl! --- изменение режима работы с файлом. Можно также заблокировать некоторый диапазон в файле. \verb!flock! --- выставление блокировки на файл целиком.

Также есть \verb!ioctl! --- выолняет... всякое разное с файловым дескриптором. Использование выглядит как
\begin{verbatim}
ioctl(int fd, int cmd, void*);
\end{verbatim}
где \verb!void*! --- способ передачи или наоборот, получения каких-либо значений.