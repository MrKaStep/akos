\section*{Документирующие комментарии}

Документирующие комментарии позволяют при помощи таких утилит, как doxygen.

Стандартный стиль комментариев, принятый  Java выглядит как
\begin{verbatim}
/** ...
 *  ...
 *  ...
 .
 .
 .
 */
\end{verbatim}

Могут начинаться с \verb!/*\!!, \verb!/*#! и другие.

Пишутся комментарии перед объявлением функции или переменной. Также можно писать всякие разные атрибуты вида \verb!@author Vasya Pupkin!, \verb!@param abs <description>!, \verb!@return ...!

Также могут быть недокументирующие комментарии вида

\begin{verbatim}
/*
 *
 *
 *
 */
\end{verbatim}

Такие комментарии просто помогают понять написанный код

\subsubsection{Очереди сообщений}

Для использования очереди сообщений в POSIX нужно линковать программу с параметром \verb!-lzt!.

Есть мнение, что очереди сообщений в POSIX несколько проще, чем в systemV.

Суть очередей сообщений в том, что в памяти ядра есть какой-то набор сообщений, к которым процессы могут получать доступ.

\textbf{POSIX}

Считается, что все сообщения приоритезированные, то есть у каждого сообщения есть тип и приоритет. 

При попытке программы получить сообщение из очереди, он блокируется до получения сообщения, а сообщение, в свою очередь, извлекается из очереди

\textbf{systemV}

При приёме сообщения можно указать в параметрах \verb!msgrcv! (принять сообщение) type --- тип принимаемого сообщения.

\begin{itemize}
\item 0 --- получить сообщение из очереди
\item >0 --- получить сообщение нужного типа
\item <0 --- получить сообщение с наименьшим приоритетом, меньше модуля заданного значения (аналог приоритета)
\end{itemize}

Парной функцией к \verb!msgrcv! является \verb!msgsnd!. Сообщение с нулевым типом отправить нельзя

Сообщение представляет из себя некоторую структуру вида

\begin{verbatim}
struct msgbuf
{
	long mtype;
	char mtext[1];
}
\end{verbatim}




























