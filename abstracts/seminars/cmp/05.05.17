\section{IPC --- Inter Process Communication}

IPC --- взаимодействие неродственных процессов внутри одного экземпляра операционной системы.

Есть два способа:

\begin{itemize}
\item POSIX IPC --- более современный и популярный

Для использования нужно линковать программу с \verb!-lrt -lpthread!.
\item system V --- более сложный для программирования, но предоставляет больше возможностей и работает несколько быстрее
\end{itemize}

Средства взаимодействия процессов:

\begin{enumerate}
\item Разделяемая память. Грубо говоря, в ядре выделяется часть памяти, после чего каждый желающий процесс присоединяет его к своему виртуальному адресному пространству.
\item Семафоры \verb!man 7 sem_overview!
\item Очереди сообщений. Сообщения 
\begin{itemize}
\item Именованные. С точки зрения system V каждому объекту сопоставлен некоторый ключ. Соответственно, если два процесса вычислили одинаковый ключ, то они оба могут пользоваться этим IPC-объектом

С точки зрения POSIX именование объектов происходит как в файловой системе в формате \verb!/.../.../...!. Процессы могут общаться по этому объекту, если у них есть одна и та же строчка.
\item Неименованные --- не могут быть средством общения, так как другой процесс просто не может узнать о их существовании.
\end{itemize}
\end{enumerate}

По умолчанию все IPC-объекты живут до момента выключения операционной системы (за исключением неименованных).

\subsection{POSIX}

Системные вызовы для использования IPC-объектов в POSIX выглядят как 
\begin{itemize}
\item \verb!ля_open! --- создать IPC объект
\item \verb!ля_close! --- отсоединиться от IPC-объекта.
\item \verb!ля_unlink! --- уничтожить IPC-объект
\end{itemize}

\subsection{System V}

Следующие вызовы позволяют создавать и подключаться к IPC-объектам.

\begin{itemize}
\item \verb!semget!
\item \verb!shmget!
\item \verb!msgget!
\end{itemize}

Отправлять разные команды объектам можно при помощи \verb!***ctl!. Уничтожение происходит при передаче IPC\_RMID.

Конвертация пути в ключ объекта System V:

\begin{verbatim}
key_t ftok(char* path, char color)
\end{verbatim}

\subsubsection{Разделяемая память aka shared memory}

\begin{verbatim}
int shm_get(key_t key, size_t size, int flags)
\end{verbatim}

Во флагах может быть
\begin{itemize}
\item \verb!IPC_CREAT! --- создание
\item \verb!IPC_EXCL! --- если объект существует, то его не надо создавать и подключаться, получить сообщение об ошибке
\end{itemize}

Права доступа \verb!rwxrwxrwx!.

Для присоединения памяти к процессу используется

\begin{verbatim}
void* shmat(int shmid, void* addr, int flags)
\end{verbatim}

При передаче второго адреса не NULL, то разделяемая память будет отображена на этот самый виртуальный адрес (но нет), иначе отображение произойдёт на первые неотображённые страницы виртуальной памяти.

Отключение происходит при помощи \verb!shmdt!

\subsubsection{Семафоры}

\begin{verbatim}
int semget(key_t key, int nsems, int flags)
\end{verbatim}

Принимает ключ, количество необходимых семафоров и флаги.

Использование происходит при помощи


\begin{verbatim}
struct sembuf
{
	unsigned short sem_num;
	short sem_op;
	short sem_flg;
}
\end{verbatim}

Эта структура задаёт операцию с семафорами. Именно массив этих структур передаётся в 

\begin{verbatim}
int semop(int semid, struct sembuf *sops, size_t nsops)
\end{verbatim}

Самым важным полем является \verb!sem_op!, которое может быть 3-ч видов:

\begin{itemize}
\item 0 --- процесс блокируется до момента, когда значение семафора будет равно 0
\item $<0$ --- Если можно вычесть, то значение семафора уменьшается и процесс продолжает работу, иначе процесс блокируется до момента возможности провести уменьшение.
\item $>0$
\end{itemize}